// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"customer-api/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCustomerRepository creates a new instance of MockCustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerRepository {
	mock := &MockCustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCustomerRepository is an autogenerated mock type for the CustomerRepository type
type MockCustomerRepository struct {
	mock.Mock
}

type MockCustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerRepository) EXPECT() *MockCustomerRepository_Expecter {
	return &MockCustomerRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) FindAll() ([]model.Customer, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []model.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.Customer, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.Customer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockCustomerRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockCustomerRepository_Expecter) FindAll() *MockCustomerRepository_FindAll_Call {
	return &MockCustomerRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockCustomerRepository_FindAll_Call) Run(run func()) *MockCustomerRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCustomerRepository_FindAll_Call) Return(customers []model.Customer, err error) *MockCustomerRepository_FindAll_Call {
	_c.Call.Return(customers, err)
	return _c
}

func (_c *MockCustomerRepository_FindAll_Call) RunAndReturn(run func() ([]model.Customer, error)) *MockCustomerRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) FindById(id string) (*model.Customer, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *model.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.Customer, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.Customer); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockCustomerRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id string
func (_e *MockCustomerRepository_Expecter) FindById(id interface{}) *MockCustomerRepository_FindById_Call {
	return &MockCustomerRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockCustomerRepository_FindById_Call) Run(run func(id string)) *MockCustomerRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerRepository_FindById_Call) Return(customer *model.Customer, err error) *MockCustomerRepository_FindById_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockCustomerRepository_FindById_Call) RunAndReturn(run func(id string) (*model.Customer, error)) *MockCustomerRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) Save(c model.Customer) (int64, error) {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Customer) (int64, error)); ok {
		return returnFunc(c)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Customer) int64); ok {
		r0 = returnFunc(c)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Customer) error); ok {
		r1 = returnFunc(c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCustomerRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - c model.Customer
func (_e *MockCustomerRepository_Expecter) Save(c interface{}) *MockCustomerRepository_Save_Call {
	return &MockCustomerRepository_Save_Call{Call: _e.mock.On("Save", c)}
}

func (_c *MockCustomerRepository_Save_Call) Run(run func(c model.Customer)) *MockCustomerRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Customer
		if args[0] != nil {
			arg0 = args[0].(model.Customer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerRepository_Save_Call) Return(n int64, err error) *MockCustomerRepository_Save_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockCustomerRepository_Save_Call) RunAndReturn(run func(c model.Customer) (int64, error)) *MockCustomerRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
